// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- MODELOS NextAuth (User/Account/Session/VerificationToken) ----
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer") // INSANYCK STEP 10 — customer|admin

  accounts Account[]
  sessions Session[]
  addresses Address[] // INSANYCK STEP 8
  orders Order[] // INSANYCK STEP 8
  wishlistItems WishlistItem[] // INSANYCK STEP 8

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// ===============================
// INSANYCK STEP 8 — Account & Orders & Wishlist
// Acrescente estes modelos ao FINAL do seu prisma/schema.prisma
// ===============================

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  phone      String
  cep        String
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId], map: "idx_address_user")
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  email           String
  stripeSessionId String      @unique
  status          String
  currency        String
  amountTotal     Int
  createdAt       DateTime    @default(now())
  items           OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  slug       String
  title      String
  priceCents Int
  qty        Int
  image      String?
  variant    String?
  // INSANYCK STEP 10 — campos novos para integração com variantes
  variantId  String?
  variantRef Variant? @relation(fields: [variantId], references: [id])
  sku        String?
}

model WishlistItem {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  slug       String
  title      String
  priceCents Int
  image      String?
  createdAt  DateTime @default(now())

  @@index([userId], map: "idx_wishlist_user")
}

// ===============================
// INSANYCK STEP 10 — Catálogo + Variantes + Estoque
// ===============================

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
  @@index([parentId])
}

model Product {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String?
  categoryId  String?
  category    Category?      @relation(fields: [categoryId], references: [id])
  
  status      String         @default("draft") // draft|active|archived
  isFeatured  Boolean        @default(false)
  
  images      ProductImage[]
  variants    Variant[]
  
  seoTitle       String?
  seoDescription String?
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@index([slug])
  @@index([categoryId])
  @@index([status])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  alt       String?
  order     Int     @default(0)
  
  @@index([productId, order])
}

model Option {
  id           String        @id @default(cuid())
  name         String        // "Size", "Color"
  slug         String        @unique
  type         String        @default("select") // select|color|size
  
  values       OptionValue[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([slug])
}

model OptionValue {
  id       String @id @default(cuid())
  optionId String
  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  name     String // "Small", "Red"
  slug     String
  value    String // "#FF0000" para cores, "S" para tamanhos
  order    Int    @default(0)
  
  variants VariantOption[]
  
  @@unique([optionId, slug])
  @@index([optionId, order])
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sku       String   @unique
  title     String?  // "P/Vermelho"
  
  options   VariantOption[]
  price     Price?
  inventory Inventory?
  orderItems OrderItem[] // INSANYCK STEP 10 — relação com pedidos
  
  status    String   @default("active") // active|inactive
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
  @@index([sku])
  @@index([status])
}

model VariantOption {
  id            String      @id @default(cuid())
  variantId     String
  variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId String
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id])
  
  @@unique([variantId, optionValueId])
}

model Price {
  id        String  @id @default(cuid())
  variantId String  @unique
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  currency  String  @default("BRL")
  cents     Int     // preço em centavos
  
  compareAtCents Int? // preço "de" para promoções
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id           String  @id @default(cuid())
  variantId    String  @unique
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  quantity     Int     @default(0)
  reserved     Int     @default(0) // para pedidos em processamento
  // INSANYCK STEP 10 — available calculado em código: quantity - reserved
  
  trackInventory Boolean @default(true)
  allowBackorder Boolean @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([quantity])
}
