# ESTRUTURA DO PROJETO INSANYCK

📄 .eslintrc.json

============================================================
FILE: .eslintrc.json
============================================================
{
  "extends": ["next/core-web-vitals"],
  "rules": {
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "@next/next/no-img-element": "off",
    "prefer-const": "warn",
    "no-unused-vars": ["warn", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "next/document",
            "message": "Import Html from next/document is only allowed in pages/_document.tsx. Use Html as DreiHtml from @react-three/drei for 3D components."
          }
        ],
        "patterns": [
          {
            "group": ["**/next/document"],
            "message": "Import Html from next/document is only allowed in pages/_document.tsx. Use Html as DreiHtml from @react-three/drei for 3D components."
          }
        ]
      }
    ]
  },
  "overrides": [
    {
      "files": ["src/pages/_document.tsx"],
      "rules": {
        "no-restricted-imports": "off"
      }
    },
    {
      "files": ["src/pages/_document.tsx", "src/pages/**/api/*.ts", "src/pages/404.tsx", "src/pages/_error.tsx"],
      "rules": {
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "@react-three/fiber",
                "message": "3D imports are not allowed in error pages, API routes, or _document to prevent bundle bloat and SSR conflicts."
              },
              {
                "name": "@react-three/drei",
                "message": "3D imports are not allowed in error pages, API routes, or _document to prevent bundle bloat and SSR conflicts."
              },
              {
                "name": "three",
                "message": "3D imports are not allowed in error pages, API routes, or _document to prevent bundle bloat and SSR conflicts."
              }
            ],
            "patterns": [
              {
                "group": ["**/three/**"],
                "message": "3D component imports are not allowed in error pages, API routes, or _document to prevent bundle bloat and SSR conflicts."
              }
            ]
          }
        ]
      }
    }
  ]
}

📄 package.json

============================================================
FILE: package.json
============================================================
{
  "name": "insanyck-luxury",
  "version": "0.1.0",
  "private": true,
  "engines": {
    "node": ">=18.18.0"
  },
  "scripts": {
    "dev": "next dev",
    "dev:webpack": "next dev",
    "build": "next build",
    "start": "next start -p 3000",
    "lint": "next lint",
    "typecheck": "tsc --noEmit",
    "lhci:ci": "lhci autorun",
    "clean": "rimraf .next || rd /s /q .next 2>nul || true",
    "prepare": "husky",
    "postinstall": "prisma generate",
    "db:seed": "tsx prisma/seed.ts",
    "changeset": "changeset",
    "version-packages": "changeset version",
    "release-notes": "changeset status --verbose",
    "test:e2e": "playwright test -c playwright.config.ts",
    "test:e2e:ci": "playwright test -c playwright.config.ts --reporter=list,html",
    "test:e2e:update": "playwright test -c playwright.config.ts --update-snapshots",
    "test:a11y": "playwright test -c playwright.a11y.config.ts",
    "test:all": "npm run test:e2e && npm run test:a11y"
  },
  "dependencies": {
    "@ducanh2912/next-pwa": "^10.2.9",
    "@hookform/resolvers": "^5.2.1",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.13.0",
    "@react-three/drei": "9.112.0",
    "@react-three/fiber": "^9.3.0",
    "@react-three/xr": "^6.6.20",
    "@stripe/react-stripe-js": "^3.9.0",
    "@stripe/stripe-js": "^7.8.0",
    "@tanstack/react-virtual": "^3.13.12",
    "@tensorflow/tfjs": "^4.22.0",
    "@tensorflow/tfjs-vis": "^1.1.0",
    "@upstash/redis": "^1.35.3",
    "bcrypt": "^6.0.0",
    "framer-motion": "^12.23.12",
    "i18next": "^25.3.4",
    "i18next-browser-languagedetector": "^8.2.0",
    "idb-keyval": "^6.2.2",
    "lucide-react": "^0.539.0",
    "micro": "^10.0.1",
    "mongodb": "^6.18.0",
    "mongoose": "^8.17.0",
    "next": "^15.4.5",
    "next-auth": "^4.24.11",
    "next-i18next": "^15.4.2",
    "next-seo": "^6.8.0",
    "pino": "^9.7.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.62.0",
    "react-i18next": "^15.6.1",
    "react-toastify": "^11.0.5",
    "react-virtuoso": "^4.13.0",
    "react-window": "^1.8.11",
    "stripe": "^18.4.0",
    "swr": "^2.3.4",
    "three": "^0.179.1",
    "workbox-window": "^7.3.0",
    "zod": "^4.0.17",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@lhci/cli": "^0.14.0",
    "@next/bundle-analyzer": "^15.4.6",
    "@playwright/test": "^1.55.0",
    "@react-email/components": "^0.5.3",
    "@tailwindcss/postcss": "^4",
    "@types/micro": "^7.3.7",
    "@types/node": "^20",
    "@types/pino": "^7.0.4",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@types/react-window": "^1.8.8",
    "eslint": "9.34.0",
    "eslint-config-next": "15.5.2",
    "playwright": "^1.55.0",
    "prisma": "^6.13.0",
    "sharp": "^0.34.3",
    "tailwindcss": "^4",
    "tsx": "^4.20.4",
    "typescript": "5.5.4"
  }
}

📄 next.config.ts

============================================================
FILE: next.config.ts
============================================================
// INSANYCK STEP 9 — withPWA + i18n (next-i18next) + NetworkOnly para APIs sensíveis
import withPWA from "@ducanh2912/next-pwa";
import type { NextConfig } from "next";
import type { RuntimeCaching } from "workbox-build";

// Reaproveita sua config real do next-i18next (não inline)
const { i18n } = require("./next-i18next.config.js");

const isProd = process.env.NODE_ENV === "production";

const runtimeCaching: RuntimeCaching[] = [
  // HTML
  {
    urlPattern: ({ request }: any) => request.mode === "navigate",
    handler: "NetworkFirst" as const,
    options: {
      cacheName: "html",
      networkTimeoutSeconds: 3,
      expiration: { maxEntries: 50, maxAgeSeconds: 60 * 60 * 24 },
    },
  },
  // APIs sensíveis — NetworkOnly
  { urlPattern: /^\/api\/auth\/?.*/i, handler: "NetworkOnly" as const },
  { urlPattern: /^\/api\/account\/?.*/i, handler: "NetworkOnly" as const },
  { urlPattern: /^\/api\/stripe\/?.*/i, handler: "NetworkOnly" as const },
  // INSANYCK STEP 10 — Admin APIs também em NetworkOnly
  { urlPattern: /^\/api\/admin\/?.*/i, handler: "NetworkOnly" as const },

  // Imagens
  {
    urlPattern: ({ request }: any) => request.destination === "image",
    handler: "CacheFirst" as const,
    options: {
      cacheName: "images",
      expiration: { maxEntries: 200, maxAgeSeconds: 60 * 60 * 24 * 30 },
    },
  },
  // 3D/Fontes
  {
    urlPattern: ({ url }: any) => url.pathname.match(/\.(glb|gltf|hdr|bin|woff2?|ttf)$/),
    handler: "StaleWhileRevalidate" as const,
    options: { cacheName: "assets-3d-fonts" },
  },
  // Outros GET
  {
    urlPattern: ({ request }: any) => request.method === "GET",
    handler: "StaleWhileRevalidate" as const,
    options: { cacheName: "misc" },
  },
];

const baseConfig: NextConfig = {
  reactStrictMode: true,
  images: { remotePatterns: [] },
  i18n,
  // Em desenvolvimento tudo bem ignorar (opcional),
  // em produção NUNCA ignorar erros de TS
  typescript: {
    ignoreBuildErrors: !isProd,
  },
  eslint: {
    // Em desenvolvimento pode ignorar (opcional),
    // em produção NUNCA ignorar erros de ESLint
    ignoreDuringBuilds: !isProd,
  },
  

  async headers() {
    const baseHeaders = [
      { key: "X-Frame-Options", value: "DENY" },
      { key: "X-Content-Type-Options", value: "nosniff" },
      { key: "Referrer-Policy", value: "strict-origin-when-cross-origin" },
      { key: "Permissions-Policy", value: "geolocation=(), microphone=(), camera=()" },
      // CSP mínima e compatível (mantemos 'unsafe-inline' para JSON-LD; ideal no futuro: nonce)
      {
        key: "Content-Security-Policy",
        value: [
          "default-src 'self'",
          // Stripe e analytics necessários; 'unsafe-inline' por causa dos scripts JSON-LD do SEO
          "script-src 'self' 'unsafe-inline' https://js.stripe.com https://*.vercel-insights.com",
          "style-src 'self' 'unsafe-inline'",
          "img-src 'self' data: blob:",
          "connect-src 'self' https://api.stripe.com https://*.vercel-insights.com",
          "frame-src https://js.stripe.com",
          "object-src 'none'",
          "base-uri 'self'",
        ].join("; "),
      },
    ];

    // HSTS somente em produção (para evitar afetar dev)
    const hsts = isProd
      ? [{ key: "Strict-Transport-Security", value: "max-age=15552000; includeSubDomains; preload" }]
      : [];

    return [
      {
        source: "/:path*",
        headers: [...baseHeaders, ...hsts],
      },
    ];
  },
};

export default withPWA({
  dest: "public",
  register: true,
  skipWaiting: true,
  disable: !isProd,
  cacheOnFrontEndNav: true,
  workboxOptions: { runtimeCaching, navigateFallback: "/offline.html" },
})(baseConfig);

📄 tailwind.config.ts

============================================================
FILE: tailwind.config.ts
============================================================
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/sections/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

export default config;

📄 tsconfig.json

============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "types": ["node", "react", "react-dom", "next", "next/types/global"],
    "incremental": true,
    "baseUrl": ".",
    "plugins": [{ "name": "next" }],
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/types/**/*.d.ts",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}

📄 next-i18next.config.js

============================================================
FILE: next-i18next.config.js
============================================================
// INSANYCK STEP 4
// next-i18next configuration centralizada para Pages Router (SSR/SSG)
const path = require('path');

const config = {
  // Parte lida pelo Next (routing / locale prefix)
  i18n: {
    defaultLocale: 'pt',
    locales: ['pt', 'en'],
  },

  // Parte lida pelo i18next/next-i18next
  // Namespaces e opções de fallback
  defaultNS: 'common',
  ns: ['common', 'nav', 'home', 'product'],
  fallbackLng: 'en', // EN é o fallback global
  reloadOnPrerender: process.env.NODE_ENV === 'development',
  localePath: path.resolve('./public/locales'),
  returnNull: false, // evita retornar null em chaves não encontradas
};

module.exports = config;

📄 prisma/schema.prisma

============================================================
FILE: prisma/schema.prisma
============================================================
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- MODELOS NextAuth (User/Account/Session/VerificationToken) ----
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer") // INSANYCK STEP 10 — customer|admin

  accounts Account[]
  sessions Session[]
  addresses Address[] // INSANYCK STEP 8
  orders Order[] // INSANYCK STEP 8
  wishlistItems WishlistItem[] // INSANYCK STEP 8

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// ===============================
// INSANYCK STEP 8 — Account & Orders & Wishlist
// Acrescente estes modelos ao FINAL do seu prisma/schema.prisma
// ===============================

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  phone      String
  cep        String
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId], map: "idx_address_user")
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  email           String
  stripeSessionId String      @unique
  status          String
  currency        String
  amountTotal     Int
  createdAt       DateTime    @default(now())
  items           OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  slug       String
  title      String
  priceCents Int
  qty        Int
  image      String?
  variant    String?
  // INSANYCK STEP 10 — campos novos para integração com variantes
  variantId  String?
  variantRef Variant? @relation(fields: [variantId], references: [id])
  sku        String?
}

model WishlistItem {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  slug       String
  title      String
  priceCents Int
  image      String?
  createdAt  DateTime @default(now())

  @@index([userId], map: "idx_wishlist_user")
}

// ===============================
// INSANYCK STEP 10 — Catálogo + Variantes + Estoque
// ===============================

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
  @@index([parentId])
}

model Product {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String?
  categoryId  String?
  category    Category?      @relation(fields: [categoryId], references: [id])
  
  status      String         @default("draft") // draft|active|archived
  isFeatured  Boolean        @default(false)
  
  images      ProductImage[]
  variants    Variant[]
  
  seoTitle       String?
  seoDescription String?
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@index([slug])
  @@index([categoryId])
  @@index([status])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  alt       String?
  order     Int     @default(0)
  
  @@index([productId, order])
}

model Option {
  id           String        @id @default(cuid())
  name         String        // "Size", "Color"
  slug         String        @unique
  type         String        @default("select") // select|color|size
  
  values       OptionValue[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([slug])
}

model OptionValue {
  id       String @id @default(cuid())
  optionId String
  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  name     String // "Small", "Red"
  slug     String
  value    String // "#FF0000" para cores, "S" para tamanhos
  order    Int    @default(0)
  
  variants VariantOption[]
  
  @@unique([optionId, slug])
  @@index([optionId, order])
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sku       String   @unique
  title     String?  // "P/Vermelho"
  
  options   VariantOption[]
  price     Price?
  inventory Inventory?
  orderItems OrderItem[] // INSANYCK STEP 10 — relação com pedidos
  
  status    String   @default("active") // active|inactive
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
  @@index([sku])
  @@index([status])
}

model VariantOption {
  id            String      @id @default(cuid())
  variantId     String
  variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId String
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id])
  
  @@unique([variantId, optionValueId])
}

model Price {
  id        String  @id @default(cuid())
  variantId String  @unique
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  currency  String  @default("BRL")
  cents     Int     // preço em centavos
  
  compareAtCents Int? // preço "de" para promoções
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id           String  @id @default(cuid())
  variantId    String  @unique
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  quantity     Int     @default(0)
  reserved     Int     @default(0) // para pedidos em processamento
  // INSANYCK STEP 10 — available calculado em código: quantity - reserved
  
  trackInventory Boolean @default(true)
  allowBackorder Boolean @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([quantity])
}

📄 src/styles/globals.css

============================================================
FILE: src/styles/globals.css
============================================================
/* INSANYCK — GLOBALS (Design System Premium, Tailwind v4) */
@import "tailwindcss";

/* Fix: Força exibição do body enquanto CSS não hidrata */
body {
  display: block !important;
}

/* =========================================================
   TOKENS (CSS Vars) — cores, tipografia, motion, etc.
   ========================================================= */
:root {
  /* Surfaces */
  --bg-0: #0b0b0b;
  --bg-1: #111213;
  --bg-2: #1a1a1a;

  /* Texto */
  --text-primary: rgba(255,255,255,.95);
  --text-secondary: rgba(255,255,255,.75);
  --text-muted: rgba(255,255,255,.55);

  /* Stroke / Glass */
  --stroke-default: rgba(255,255,255,.12);
  --stroke-hover: rgba(255,255,255,.20);
  --glass-weak: rgba(255,255,255,.04);
  --glass-medium: rgba(255,255,255,.08);
  --glass-strong: rgba(255,255,255,.12);

  /* Brand (Gold) */
  --gold-300: #fde047;
  --gold-400: #facc15; /* primária */
  --gold-500: #eab308;
  --brand: var(--gold-400);

  /* Sombras */
  --shadow-sm: 0 1px 2px rgba(0,0,0,.15);
  --shadow-md: 0 4px 6px -1px rgba(0,0,0,.20), 0 2px 4px -1px rgba(0,0,0,.10);
  --shadow-lg: 0 10px 15px -3px rgba(0,0,0,.25), 0 4px 6px -2px rgba(0,0,0,.15);
  --shadow-xl: 0 20px 25px -5px rgba(0,0,0,.30), 0 10px 10px -5px rgba(0,0,0,.15);
  --shadow-glow: 0 0 30px rgba(250,204,21,.15);
  --shadow-glow-strong: 0 0 60px rgba(250,204,21,.25);

  /* Tipografia (usa sua variável se existir) */
  --font-display: var(--font-brand, ui-sans-serif, system-ui);
  --font-body: var(--font-brand, ui-sans-serif, system-ui);
  --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;

  /* Motion */
  --duration-fast: 150ms;
  --duration-normal: 200ms;
  --duration-slow: 300ms;
  --ease-out: cubic-bezier(.25,.46,.45,.94);
  --ease-in-out: cubic-bezier(.4,0,.2,1);
  --ease-premium: cubic-bezier(.2,0,0,1);
  --spring: cubic-bezier(.34,1.56,.64,1);

  /* ===== Aliases p/ retrocompatibilidade (seu CSS antigo) ===== */
  --text: var(--text-primary);
  --muted: var(--text-secondary);
  --stroke: var(--stroke-default);
  --ghost: var(--glass-weak);
  --cta: #f3f3f3;
}

/* =========================================================
   MAPEAMENTO PARA TAILWIND v4 (@theme inline)
   ========================================================= */
@theme inline {
  --color-bg-0: var(--bg-0);
  --color-bg-1: var(--bg-1);
  --color-text: var(--text-primary);
  --color-text-muted: var(--text-secondary);
  --color-stroke: var(--stroke-default);
  --color-brand: var(--brand);
  --font-sans: var(--font-body);
  --font-mono: var(--font-mono);
}

/* =========================================================
   BASE
   ========================================================= */
html {
  scroll-behavior: smooth;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

html, body, #__next { height: 100%; margin: 0; padding: 0; }

body {
  font-family: var(--font-body);
  color: var(--text-primary);
  background:
    radial-gradient(ellipse 1400px 800px at 20% -20%, rgba(250,204,21,.06), transparent 60%),
    radial-gradient(ellipse 1000px 600px at 80% 120%, rgba(255,255,255,.03), transparent 50%),
    var(--bg-0);
  line-height: 1.6;
  overflow-x: hidden;
}

/* A11y */
*:focus-visible {
  outline: 2px solid var(--gold-400);
  outline-offset: 2px;
}

/* Scrollbar (WebKit) */
::-webkit-scrollbar { width: 8px; height: 8px; }
::-webkit-scrollbar-track { background: var(--bg-1); }
::-webkit-scrollbar-thumb { background: var(--stroke-default); border-radius: 9999px; }
::-webkit-scrollbar-thumb:hover { background: var(--stroke-hover); }

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: .01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: .01ms !important;
    scroll-behavior: auto !important;
  }
  html { scroll-behavior: auto !important; }
  
  /* Disable framer-motion animations */
  [data-framer-motion] {
    transform: none !important;
    animation: none !important;
  }
}

/* =========================================================
   TIPOGRAFIA UTIL (para títulos/manifesto, compatível com seu mock)
   ========================================================= */
.text-display-2xl {
  font-family: var(--font-display);
  font-size: clamp(56px, 9vw, 112px);
  font-weight: 700;
  line-height: 1.05;
  letter-spacing: .24em; /* tracking do mock */
}

.text-display-xl {
  font-family: var(--font-display);
  font-size: clamp(32px, 5vw, 72px);
  font-weight: 700;
  line-height: 1.1;
}

.text-body-lg { font-size: 1.125rem; line-height: 1.7; color: var(--text-secondary); }
.text-body    { font-size: 1rem;    line-height: 1.6; color: var(--text-secondary); }
.text-caption { font-size: .875rem; line-height: 1.5; color: var(--text-muted); }

/* =========================================================
   CONTAINERS / LAYOUT
   ========================================================= */
.insanyck-container { min-height: 100vh; position: relative; }

.insanyck-section {
  padding: 4rem 1rem; /* mobile */
  max-width: 1280px;
  margin-inline: auto;
}
@media (min-width: 768px)  { .insanyck-section { padding: 4rem 2rem; } }
@media (min-width: 1200px) { .insanyck-section { padding: 4rem 3rem; } }

/* Pequeno halo auxiliar pra qualquer seção */
.section-halo {
  position: relative;
}
.section-halo::before {
  content: "";
  position: absolute; inset: 0;
  background: radial-gradient(60% 60% at 50% 35%, rgba(255,255,255,.06) 0%, rgba(255,255,255,0) 60%);
  pointer-events: none;
}

/* =========================================================
   BOTÕES (padrão: usar duas classes no JSX, ex.: "btn btn--primary")
   ========================================================= */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: .5rem;
  padding: 1rem 1.5rem;
  border-radius: 1rem;
  font-weight: 600;
  font-size: 1rem;
  line-height: 1;
  cursor: pointer;
  text-decoration: none;
  user-select: none;
  position: relative;
  transition: transform var(--duration-normal) var(--ease-out), box-shadow var(--duration-normal) var(--ease-out), background var(--duration-normal) var(--ease-out);
}

.btn--primary {
  background: linear-gradient(135deg, var(--gold-400), var(--gold-500));
  color: var(--bg-0);
  box-shadow: var(--shadow-md), var(--shadow-glow);
}
.btn--primary:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg), var(--shadow-glow-strong);
  background: linear-gradient(135deg, var(--gold-300), var(--gold-400));
}
.btn--primary:active { transform: translateY(0); transition-duration: var(--duration-fast); }

.btn--ghost {
  background: var(--glass-weak);
  border: 1px solid var(--stroke-default);
  color: var(--text-primary);
  backdrop-filter: blur(12px);
}
.btn--ghost:hover {
  background: var(--glass-medium);
  border-color: var(--stroke-hover);
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

/* === Alias para compatibilidade com código antigo === */
.btn-ghost { /* se em algum ponto do projeto só tiver "btn-ghost" */
  background: var(--glass-weak);
  border: 1px solid var(--stroke-default);
  color: var(--text-primary);
}

/* =========================================================
   GLASS SURFACES / NAV / MODAL
   ========================================================= */
.glass-card {
  background: var(--glass-weak);
  backdrop-filter: blur(16px);
  border: 1px solid var(--stroke-default);
  border-radius: 1.5rem;
  box-shadow: var(--shadow-lg);
}
.glass-navbar {
  background: rgba(11,11,11,.85);
  backdrop-filter: blur(24px) saturate(1.2);
  /* Remova/adicione a hairline conforme a tela de referência */
  /* border-bottom: 1px solid var(--stroke-default); */
}
.glass-modal {
  background: rgba(17,18,19,.95);
  backdrop-filter: blur(32px);
  border: 1px solid var(--stroke-default);
  border-radius: 1rem;
}

/* =========================================================
   GRADIENTES / TEXTO DOURADO
   ========================================================= */
.gradient-gold { background: linear-gradient(135deg, var(--gold-400), var(--gold-500)); }
.gradient-text-gold {
  background: linear-gradient(135deg, var(--gold-300), var(--gold-500));
  -webkit-background-clip: text; background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* =========================================================
   ANIMAÇÕES (cinematográficas base)
   ========================================================= */
@keyframes fadeInUp   { from { opacity:0; transform: translateY(30px) } to { opacity:1; transform:none } }
@keyframes fadeInScal { from { opacity:0; transform: scale(.95) }     to { opacity:1; transform:scale(1) } }
@keyframes pulseGlow  { 0%,100% { opacity:.6; transform:scale(1) } 50% { opacity:1; transform:scale(1.02) } }
@keyframes shimmer    { from { transform: translateX(-100%) } to { transform: translateX(100%) } }

.animate-fade-in-up    { animation: fadeInUp var(--duration-slow) var(--ease-out) both; }
.animate-fade-in-scale { animation: fadeInScal var(--duration-slow) var(--ease-out) both; }
.animate-pulse-glow    { animation: pulseGlow 2s var(--ease-in-out) infinite; }

.shimmer-effect { position: relative; overflow: hidden; }
.shimmer-effect::after {
  content:""; position:absolute; inset:0;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,.12), transparent);
  animation: shimmer 2s infinite;
}

/* =========================================================
   MOBILE TUNING
   ========================================================= */
@media (max-width: 768px) {
  .text-display-2xl { font-size: 2.5rem; letter-spacing: .18em; }
  .insanyck-section { padding: 2rem 1rem; }
  .btn { padding: .75rem 1rem; min-height: 44px; }
}

/* =========================================================
   PRINT (segurança)
   ========================================================= */
@media print {
  * { background: #fff !important; color: #000 !important; box-shadow: none !important; }
}

/* =========================================================
   TRANSIÇÕES PREMIUM - Utilitárias consistentes
   ========================================================= */
.transition-premium {
  transition: all var(--duration-fast) var(--ease-premium);
}

.transition-premium-slow {
  transition: all var(--duration-normal) var(--ease-premium);
}

.transition-colors-premium {
  transition: color var(--duration-fast) var(--ease-premium), 
              background-color var(--duration-fast) var(--ease-premium),
              border-color var(--duration-fast) var(--ease-premium);
}

.transition-transform-premium {
  transition: transform var(--duration-fast) var(--ease-premium);
}

.transition-shadow-premium {
  transition: box-shadow var(--duration-fast) var(--ease-premium);
}
/* INSANYCK STEP 7.1 PATCH — defensivo para textos que apareçam verticais por engano */
.insanyck-reset-text {
  writing-mode: horizontal-tb;
  text-orientation: mixed;
}

/* INSANYCK STEP 7.1 PATCH — acessibilidade: melhora foco em fundo escuro com hairline */
:focus-visible {
  outline-color: var(--gold-400);
  outline-width: 2px;
  outline-offset: 2px;
}

/* INSANYCK STEP 9 — halo cinematográfico leve */
.halo-cinema {
  position: relative;
}
.halo-cinema::before {
  content: "";
  position: absolute;
  inset: -10px;
  border-radius: 24px;
  background: radial-gradient(
    120% 60% at 80% 20%,
    rgba(255,255,255,.08) 0%,
    rgba(255,255,255,0) 60%
  );
  pointer-events: none;
  filter: blur(8px);
}

/* =========================================================
   INSANYCK STEP 9 — Botões premium (glass + hairline + micro-elevation)
   (Compatível com Tailwind v4: sem @apply de classe custom)
   ========================================================= */
   @layer components {
    /* Base (se quiser usar junto no futuro) */
    .btn-insanyck {
      @apply inline-flex items-center justify-center rounded-xl px-5 py-2.5
             text-[14px] font-semibold tracking-wide select-none
             border transition-all duration-150 ease-out
             focus:outline-none focus-visible:ring-2 focus-visible:ring-white/30
             disabled:opacity-60 disabled:cursor-not-allowed;
    }
  
    /* Variante PRIMARY — inclui a base inteira (não precisa usar duas classes no HTML) */
    .btn-insanyck--primary {
      @apply inline-flex items-center justify-center rounded-xl px-5 py-2.5
             text-[14px] font-semibold tracking-wide select-none
             border transition-all duration-150 ease-out
             focus:outline-none focus-visible:ring-2 focus-visible:ring-white/30
             disabled:opacity-60 disabled:cursor-not-allowed
             border-white/10 bg-white/90 text-black
             hover:bg-white hover:-translate-y-px active:translate-y-0;
    }
  
    /* Variante GHOST — inclui a base inteira (não precisa usar duas classes no HTML) */
    .btn-insanyck--ghost {
      @apply inline-flex items-center justify-center rounded-xl px-5 py-2.5
             text-[14px] font-semibold tracking-wide select-none
             border transition-all duration-150 ease-out
             focus:outline-none focus-visible:ring-2 focus-visible:ring-white/30
             disabled:opacity-60 disabled:cursor-not-allowed
             border-white/10 bg-white/5 text-white/90
             hover:bg-white/10 hover:border-white/20 hover:-translate-y-px active:translate-y-0;
    }
  }
  

/* =========================================================
   INSANYCK STEP 9 — Cinematic Bloom (não usar em checkout/pagamento)
   ========================================================= */
.insanyck-bloom {
  position: relative;
  isolation: isolate;
}
.insanyck-bloom::before {
  content: "";
  position: absolute;
  inset: -10%;
  pointer-events: none;
  z-index: -1;
  opacity: 0; /* base neutra; variantes ajustam */
  transition: opacity .3s ease-out;
  background:
    radial-gradient(60% 60% at 50% 30%, rgba(255,255,255,.06) 0%, rgba(255,255,255,0) 50%),
    radial-gradient(40% 40% at 80% 10%, rgba(250,204,21,.08) 0%, rgba(250,204,21,0) 60%); /* usa o dourado do projeto */
  filter: blur(12px);
  mix-blend-mode: screen;
}
@media (prefers-reduced-motion: no-preference) {
  .insanyck-bloom--soft::before { opacity: .24; }
  .insanyck-bloom--edge::before { opacity: .18; filter: blur(10px) saturate(1.05); }
}

/* =========================================================
   INSANYCK STEP 9 — Skeletons (grid/list/text/thumb)
   ========================================================= */
@keyframes insanyck-shimmer {
  0%   { background-position: -200% 0; }
  100% { background-position:  200% 0; }
}
.skl {
  border-radius: 14px;
  background: linear-gradient(90deg,
               rgba(255,255,255,.05) 25%,
               rgba(255,255,255,.09) 37%,
               rgba(255,255,255,.05) 63%);
  background-size: 400% 100%;
  animation: insanyck-shimmer 1400ms linear infinite;
  border: 1px solid rgba(255,255,255,.08);
}
.skl--text    { height: 1rem; }
.skl--text-lg { height: 1.25rem; }
.skl--thumb   { aspect-ratio: 4 / 5; width: 100%; }

📄 src/pages/_app.tsx

============================================================
FILE: src/pages/_app.tsx
============================================================
// INSANYCK STEP 4 + STEP 8 + HOTFIX + Lote 4
import type { AppProps } from "next/app";
import { appWithTranslation } from "next-i18next";
import dynamic from "next/dynamic";

// importa o CSS global
import "../styles/globals.css";

// INSANYCK STEP 8 — NextAuth Provider
import { SessionProvider } from "next-auth/react";
import type { Session } from "next-auth";

// INSANYCK STEP 4 · Lote 4 — PWA update functionality
import { useServiceWorkerUpdate } from "@/lib/pwa/useServiceWorkerUpdate";
import { UpdateBanner } from "@/components/pwa/UpdateBanner";

// Layout global components
const Navbar = dynamic(() => import("@/components/Navbar"), { ssr: false });
const MiniCart = dynamic(() => import("@/components/MiniCart"), { ssr: false });

// INSANYCK STEP 4 · Lote 4 — LayoutShell with PWA update functionality
function LayoutShell({ children }: { children: React.ReactNode }) {
  // [DEV] Fix: Bypass hydration issues in development
  const isDev = process.env.NODE_ENV === 'development';
  
  const { hasUpdate, updating, update } = useServiceWorkerUpdate();

  // INSANYCK STEP 4 · Lote 4 — hide SW banner under test
  const hideUpdateBanner = process.env.INSANYCK_TEST_HIDE_UPDATE_BANNER === '1';

  if (isDev) {
    console.debug('[dev] LayoutShell mounted');
  }

  return (
    <>
      {hasUpdate && !hideUpdateBanner && <UpdateBanner onUpdate={update} updating={updating} />}
      <Navbar />
      {children}
      <MiniCart />
    </>
  );
}

function MyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps<{ session: Session | null }>) {
  return (
    <SessionProvider session={session}>
      <LayoutShell>
        <Component {...pageProps} />
      </LayoutShell>
    </SessionProvider>
  );
}

export default appWithTranslation(MyApp);

📄 src/pages/_document.tsx

============================================================
FILE: src/pages/_document.tsx
============================================================
// INSANYCK STEP 4
import Document, { Html, Head, Main, NextScript, DocumentContext } from "next/document";

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const initialProps = await Document.getInitialProps(ctx);
    return { ...initialProps };
  }

  render() {
    // Locale resolvido pelo Next (Pages Router) em SSR
    const currentLocale = (this.props as any).__NEXT_DATA__?.locale || "pt";
    const pagePath = (this.props as any).__NEXT_DATA__?.page || "/";
    const ogLocale = currentLocale === "pt" ? "pt_BR" : "en_US";

    // Base URL para hreflang absolutos
    const baseUrl = process.env.NEXT_PUBLIC_URL || "https://insanyck.com";
    
    // Helpers com URLs absolutos para alternates
    const hrefPt = `${baseUrl}${pagePath === "/" ? "/" : pagePath}`;
    const hrefEn = `${baseUrl}${pagePath === "/" ? "/en" : `/en${pagePath}`}`;

    return (
      <Html lang={currentLocale}>
        <Head>
          {/* DNS prefetch control */}
          <meta httpEquiv="x-dns-prefetch-control" content="on" />
          
          {/* Resource hints for Google Fonts */}
          <link rel="preconnect" href="https://fonts.googleapis.com" crossOrigin="" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
          <link rel="dns-prefetch" href="//fonts.googleapis.com" />
          <link rel="dns-prefetch" href="//fonts.gstatic.com" />
          
          {/* Resource hints for Stripe */}
          <link rel="preconnect" href="https://js.stripe.com" />
          <link rel="dns-prefetch" href="//js.stripe.com" />

          {/* OG locale por idioma */}
          <meta property="og:locale" content={ogLocale} />

          {/* Alternates hreflang */}
          <link rel="alternate" hrefLang="pt" href={hrefPt} />
          <link rel="alternate" hrefLang="en" href={hrefEn} />
          <link rel="alternate" hrefLang="x-default" href={hrefPt} />

          {/* Mantém PWA funcionando */}
          <link rel="manifest" href="/manifest.json" />
          <meta name="theme-color" content="#000000" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

📄 src/pages/index.tsx

============================================================
FILE: src/pages/index.tsx
============================================================
// INSANYCK STEP 4
import Head from "next/head";
import type { GetStaticProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useRouter } from "next/router";
import { useTranslation } from "next-i18next";
import HeroHome from "@/sections/HeroHome";
import { seoHome } from "@/lib/seo";

export default function HomePage() {
  const { locale } = useRouter();
  const { t } = useTranslation('home');
  const seo = seoHome(locale);

  // [DEV] Diagnostic log
  if (process.env.NODE_ENV === 'development') {
    console.debug('[dev] HomePage render');
  }

  return (
    <>
      <Head>
        <title>{seo.title}</title>
        {seo.meta.map((tag, index) => (
          <meta key={index} {...tag} />
        ))}
        {seo.link.map((link, index) => (
          <link key={index} {...link} />
        ))}
        {seo.jsonLd.map((schema, index) => (
          <script
            key={index}
            type="application/ld+json"
            dangerouslySetInnerHTML={{ __html: JSON.stringify(schema) }}
          />
        ))}
      </Head>
      {/* INSANYCK STEP 4 · Lote 3 — Skip link para navegação A11y + neutralização de layout */}
      <a 
        href="#conteudo" 
        className="sr-only focus:not-sr-only focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 absolute left-2 top-2 z-50 px-3 py-2 rounded-2xl bg-black/60 backdrop-blur text-white"
      >
        Pular para conteúdo
      </a>
      <main id="conteudo" className="pt-24">
        {/* INSANYCK STEP 4 · Lote 3 — H1 sr-only para hierarquia A11y */}
        <h1 className="sr-only">{t('hero.title', 'INSANYCK — Essential luxury in motion')}</h1>
        <HeroHome />
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async ({ locale }) => {
  const lng = locale || 'pt';
  return {
    props: {
      ...(await serverSideTranslations(lng, ['common', 'nav', 'home', 'product'])),
    },
    revalidate: 60,
  };
};

📄 src/sections/HeroHome.tsx

============================================================
FILE: src/sections/HeroHome.tsx
============================================================
"use client";

import { CTA } from "@/components/CTA";
import Link from "next/link";
import { useRef } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "next-i18next"; // INSANYCK STEP 4
// INSANYCK STEP 4 · Lote 3 — OptimizedImage para zero CLS
import OptimizedImage from "@/components/ui/OptimizedImage";

// INSANYCK STEP 4 — tipagem das chaves usadas neste componente
type HomeKey =
  | "carousel.dropZero"
  | "carousel.oversizedClassic"
  | "carousel.regatas"
  | "carousel.acessorios";

// INSANYCK STEP 4 — não repita o namespace no item; usamos useTranslation("home")
const ITEMS: ReadonlyArray<{ titleKey: HomeKey; img: string }> = [
  { titleKey: "carousel.dropZero",         img: "/thumbs/drop-zero.png" },
  { titleKey: "carousel.oversizedClassic", img: "/thumbs/oversized-classic.png" },
  { titleKey: "carousel.regatas",          img: "/thumbs/regatas.png" },
  { titleKey: "carousel.acessorios",       img: "/thumbs/acessorios.png" },
] as const;

export default function HeroHome() {
  const scroller = useRef<HTMLDivElement>(null);
  const { t } = useTranslation("home"); // INSANYCK STEP 4 — use string única, não array

  return (
    <section
      className="relative pt-[120px] pb-[80px] overflow-hidden"
      aria-labelledby="hero-home"
    >
      {/* Halo/aneis de fundo (leve) */}
      <div
        aria-hidden
        className="pointer-events-none absolute inset-0 -z-10"
        style={{
          background:
            "radial-gradient(60% 60% at 50% 40%, rgba(255,255,255,0.06) 0%, rgba(255,255,255,0.02) 35%, rgba(0,0,0,0) 60%)",
          maskImage:
            "radial-gradient(60% 60% at 50% 40%, #000 0%, #000 55%, transparent 70%)",
          WebkitMaskImage:
            "radial-gradient(60% 60% at 50% 40%, #000 0%, #000 55%, transparent 70%)",
        }}
      />
      <div className="mx-auto max-w-[1200px] px-6">
        {/* H2 caps com tracking exato (h1 já está na página principal) */}
        <h2
          id="hero-home"
          className="text-center text-[120px] leading-[1] font-semibold tracking-[0.25em] text-white/90 select-none"
          style={{ textTransform: "uppercase" }}
        >
          {/* Mantém o wordmark como texto simples, não traduzimos o nome da marca */}
          INSANYCK
        </h2>

        {/* Manifesto */}
        <p className="mt-8 text-center text-[28px] leading-[1.4] text-white/80">
          {/* INSANYCK STEP 4 — sem prefixo 'home:' porque o namespace já está resolvido */}
          {t("manifesto.line1", "Desconstruir o ordinário.")}
          <br />
          {t("manifesto.line2", "Reconstruir o extraordinário.")}
        </p>

        {/* CTAs */}
        <div className="mt-10 flex items-center justify-center gap-4">
          <Link href="/loja" prefetch={true}>
            <CTA>
              {t("cta.shop", "Entrar na loja") /* INSANYCK STEP 4 */}
            </CTA>
          </Link>
          <Link href="/manifesto" prefetch={true}>
            <CTA variant="ghost">
              {t("cta.manifesto", "Manifesto") /* INSANYCK STEP 4 */}
            </CTA>
          </Link>
        </div>

        {/* "Role para explorar" + bullets - MAIS ESPAÇO */}
        <div className="mt-20 text-center text-white/70">
          {t("scrollToExplore", "Role para explorar") /* INSANYCK STEP 4 */}
        </div>
        <div className="mt-3 flex justify-center gap-2">
          <span className="w-1.5 h-1.5 rounded-full bg-white/30" />
          <span className="w-1.5 h-1.5 rounded-full bg-white/30" />
          <span className="w-1.5 h-1.5 rounded-full bg-white/30" />
          <span className="w-1.5 h-1.5 rounded-full bg-white/30" />
        </div>

        {/* Carrossel CENTRALIZADO e com mais espaço */}
        <div className="mt-16 flex justify-center">
          <div
            ref={scroller}
            className="flex gap-6 overflow-x-auto pb-6 snap-x snap-mandatory [-ms-overflow-style:none] [scrollbar-width:none] max-w-fit px-6"
            style={{ WebkitOverflowScrolling: "touch" }}
            aria-label={t("aria.carousel", "Carrossel de coleções") /* INSANYCK STEP 4 */}
          >
            <style jsx global>{`
              /* esconder scrollbar; mantém acessibilidade por teclado */
              .snap-x::-webkit-scrollbar { display: none; }
            `}</style>
            {ITEMS.map((it, index) => (
              <motion.article
                key={it.titleKey}
                whileHover={{ y: -2, borderColor: "rgba(255,255,255,0.15)" }}
                transition={{ duration: 0.15, ease: [0.2, 0, 0, 1] }}
                className="snap-start shrink-0 w-[220px] h-[140px] rounded-2xl bg-[#0f0f10] border border-white/10 shadow-[inset_0_1px_0_rgba(255,255,255,0.06)] relative overflow-hidden focus-within:ring-2 focus-within:ring-white/40 focus-within:ring-offset-2 focus-within:ring-offset-black"
              >
              {/* INSANYCK STEP 4 · Lote 3 — OptimizedImage para zero CLS */}
              <OptimizedImage
                src={it.img}
                alt={`${t(it.titleKey)} — ${t("aria.collection", "Coleção INSANYCK")}`}
                aspectRatio="22/14"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 100vw, 220px"
                className="object-cover opacity-[0.92]"
                priority={index === 0}
                loading={index === 0 ? "eager" : "lazy"}
                fallbackSrc="/thumbs/placeholder.webp"
              />

                <div className="absolute inset-0 bg-[linear-gradient(180deg,rgba(0,0,0,0)_0%,rgba(0,0,0,0.5)_100%)]" />
                <div className="absolute bottom-3 left-4 text-white/90 text-sm font-medium">
                  {t(it.titleKey) /* INSANYCK STEP 4 — exibirá 'Drop Zero', etc. */}
                </div>
              </motion.article>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}

📄 src/components/Navbar.tsx

============================================================
FILE: src/components/Navbar.tsx
============================================================
// INSANYCK STEP 9 — Navbar com favoritos + hideCart (FIX hooks)
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { Search, ShoppingBag, Heart } from "lucide-react";
import { useTranslation } from "next-i18next";

import dynamic from "next/dynamic";
import { useCartCount, useCartStore } from "@/store/cart";

// Mantidos (SearchBox/MiniCart)
const SearchBox = dynamic(() => import("@/components/SearchBox"), { ssr: false });
const MiniCart = dynamic(() => import("@/components/MiniCart"), { ssr: false });

// Wishlist (seu store real)
import { useWishlist } from "@/store/wishlist";

// NextAuth (UserMenu usa)
import { useSession } from "next-auth/react";

export default function Navbar() {
  const router = useRouter();
  const { t, i18n } = useTranslation(["nav"]);
  const currentLocale = i18n?.language || (router as any).locale || "pt";

  // esconder sacola/favoritos em rotas sensíveis
  const { pathname } = useRouter();
  const hideCart =
    pathname.startsWith("/checkout") || pathname.startsWith("/conta/pagamento");

  // Idioma
  function switchLocale(nextLocale: "pt" | "en") {
    if (nextLocale === currentLocale) return;
    const asPath = (router as any).asPath || "/";
    (router as any).push(asPath, asPath, { locale: nextLocale });
  }

  // Carrinho
  const count = useCartCount();
  const toggleCart = useCartStore((s) => s.toggle);

  // ---------- FIX CRÍTICO DE HOOKS ----------
  // Chame o hook SEMPRE (nunca condicional)
  const wishlistLen = useWishlist((s) => s.items.length);
  // Hidratação: só exibimos o número depois de montar
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  const wishlistCount = mounted ? wishlistLen : 0;
  // -----------------------------------------

  return (
    <header
      className="
        fixed inset-x-0 top-0 z-50
        backdrop-blur-[10px]
        bg-[rgba(10,10,10,.42)]
        border-b border-[rgba(255,255,255,.08)]
      "
      role="navigation"
      aria-label={t("nav:aria.mainNav", "Principal")}
    >
      <div className="mx-auto max-w-[1280px] px-6 py-4 flex items-center justify-between">
        {/* Logo */}
        <Link
          href="/"
          aria-label={t("nav:aria.goHome", "Ir para a Home")}
          className="flex items-center"
        >
          <span
            className="text-[20px] font-medium text-white/90 tracking-[0.15em] select-none"
            style={{ textTransform: "uppercase" }}
          >
            INSANYCK
          </span>
        </Link>

        {/* Links centrais */}
        <nav className="hidden md:flex items-center gap-12 text-[16px] text-white/82">
          <Link 
            href="/novidades" 
            prefetch={true}
            className="hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg px-2 py-1"
          >
            {t("nav:links.novidades", "Novidades")}
          </Link>
          <Link 
            href="/loja" 
            prefetch={true}
            className="hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg px-2 py-1"
          >
            {t("nav:links.loja", "Loja")}
          </Link>
          <Link 
            href="/colecao" 
            prefetch={true}
            className="hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg px-2 py-1"
          >
            {t("nav:links.colecao", "Coleção")}
          </Link>
        </nav>

        {/* Ações (direita) */}
        <div className="flex items-center gap-6">
          {/* Switcher idioma */}
          <div
            className="hidden sm:flex items-center gap-2 text-white/70 text-[12px] leading-none select-none"
            aria-label={t("nav:aria.language", "Idioma")}
          >
            <button
              type="button"
              onClick={() => switchLocale("pt")}
              className={`px-2 py-1 rounded-[6px] border border-white/10 hover:border-white/25 hover:text-white/95 hover:bg-white/5 transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1 ${
                String(currentLocale).startsWith("pt") ? "text-white border-white/20 bg-white/5" : ""
              }`}
              aria-pressed={String(currentLocale).startsWith("pt")}
            >
              PT
            </button>
            <span className="opacity-40">/</span>
            <button
              type="button"
              onClick={() => switchLocale("en")}
              className={`px-2 py-1 rounded-[6px] border border-white/10 hover:border-white/25 hover:text-white/95 hover:bg-white/5 transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1 ${
                String(currentLocale).startsWith("en") ? "text-white border-white/20 bg-white/5" : ""
              }`}
              aria-pressed={String(currentLocale).startsWith("en")}
            >
              EN
            </button>
          </div>

          {/* Mantidos do seu projeto */}
          <SearchBox />
          <UserMenu />

          {/* Link para buscar (mantido) */}
          <Link
            href="/buscar"
            prefetch={true}
            aria-label={t("nav:aria.search", "Pesquisar")}
            className="text-white/80 hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg p-2"
          >
            {/* INSANYCK STEP 4 · Lote 3 — Sr-only text para ícone */}
            <span className="sr-only">{t("nav:aria.search", "Pesquisar")}</span>
            <Search size={22} strokeWidth={1.5} aria-hidden="true" focusable="false" />
          </Link>

          {/* Favoritos (com contador) — oculta em checkout/pagamento */}
          {!hideCart && (
            <Link
              href="/favoritos"
              prefetch={true}
              aria-label="Favoritos"
              className="relative text-white/80 hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg p-2"
            >
              {/* INSANYCK STEP 4 · Lote 3 — Sr-only text para ícone */}
              <span className="sr-only">Favoritos</span>
              <Heart size={22} strokeWidth={1.5} aria-hidden="true" focusable="false" />
              {wishlistCount > 0 && (
                <span className="absolute -top-1.5 -right-1.5 min-w-4 h-4 px-1 rounded-full bg-white text-black text-[10px] leading-4 font-semibold ring-1 ring-black/10 text-center">
                  {wishlistCount}
                </span>
              )}
            </Link>
          )}

          {/* Sacola (drawer) — oculta em checkout/pagamento */}
          {!hideCart && (
            <button
              type="button"
              onClick={() => toggleCart(true)}
              aria-label={t("nav:aria.cart", "Carrinho")}
              className="relative text-white/80 hover:text-white/95 transition-colors duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black rounded-lg p-2"
            >
              {/* INSANYCK STEP 4 · Lote 3 — Sr-only text para ícone */}
              <span className="sr-only">{t("nav:aria.cart", "Carrinho")}</span>
              <ShoppingBag size={22} strokeWidth={1.5} aria-hidden="true" focusable="false" />
              {count > 0 && (
                <span className="absolute -top-1.5 -right-1.5 min-w-4 h-4 px-1 rounded-full bg-white text-black text-[10px] leading-4 font-semibold ring-1 ring-black/10 text-center">
                  {count}
                </span>
              )}
            </button>
          )}
        </div>
      </div>

      {/* Drawer Mini-Cart (lazy) */}
      {!hideCart && <MiniCart />}
    </header>
  );
}

/* ======================= Mantido — UserMenu ======================= */
function UserMenu() {
  const { data: session, status } = useSession();

  if (status !== "authenticated") {
    return (
      <Link
        href="/conta/login"
        prefetch={true}
        className="text-white/80 hover:text-white/95 transition-all duration-150 px-2 py-1 rounded-lg border border-white/10 hover:border-white/25 hover:bg-white/5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black"
      >
        Entrar
      </Link>
    );
  }

  const name = session?.user?.name ?? session?.user?.email ?? "Conta";

  return (
    <div className="relative group">
      <button className="text-white/80 hover:text-white/95 transition-all duration-150 px-2 py-1 rounded-lg border border-white/10 hover:border-white/25 hover:bg-white/5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-2 focus-visible:ring-offset-black">
        {String(name).split(" ")[0]}
      </button>
      <div className="absolute right-0 mt-2 hidden group-hover:block rounded-2xl border border-white/10 bg-black/70 backdrop-blur-md shadow-[inset_0_1px_0_rgba(255,255,255,0.06)] p-2 w-[220px] z-[60]">
        <Link className="block px-3 py-2 text-white/80 hover:text-white/95 hover:bg-white/8 rounded-lg transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1" href="/conta" prefetch={true}>
          Minha conta
        </Link>
        <Link className="block px-3 py-2 text-white/80 hover:text-white/95 hover:bg-white/8 rounded-lg transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1" href="/conta/pedidos" prefetch={true}>
          Pedidos
        </Link>
        <Link className="block px-3 py-2 text-white/80 hover:text-white/95 hover:bg-white/8 rounded-lg transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1" href="/favoritos" prefetch={true}>
          Favoritos
        </Link>
        <form method="post" action="/api/auth/signout" className="mt-1">
          <button className="w-full text-left px-3 py-2 text-white/70 hover:text-white/95 hover:bg-white/8 rounded-lg transition-all duration-150 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/40 focus-visible:ring-offset-1">
            Sair
          </button>
        </form>
      </div>
    </div>
  );
}

📄 src/lib/seo.ts

============================================================
FILE: src/lib/seo.ts
============================================================
// INSANYCK SEO Core Library
// Handles meta tags, Open Graph, Twitter Cards, hreflang, and JSON-LD
import React from 'react';
import { PUBLIC_URL, getPublicBaseUrl } from './env.public';

type LinkTag = React.DetailedHTMLProps<
  React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement
>;

// Base configuration
export const baseTitle = 'INSANYCK';
export const baseDescription = 'Luxury fashion • Vidro leve • Borda hairline';

// Helper to get base URL with development fallback
export const getBaseUrl = (): string => {
  // No cliente, sempre a origem atual (evita URL errada atrás de proxy)
  if (typeof window !== 'undefined') return window.location.origin;
  // No server, usar PUBLIC_URL seguro (nunca lança)
  return PUBLIC_URL || getPublicBaseUrl();
};

// Build page title with INSANYCK suffix
export const buildTitle = (pageTitle?: string): string => {
  if (!pageTitle) return baseTitle;
  return `${pageTitle} • ${baseTitle}`;
};

// Interface for meta tags configuration
interface MetaTagsConfig {
  title: string;
  description?: string;
  canonical?: string;
  image?: string;
  locale?: string;
  type?: 'website' | 'article' | 'product';
  noIndex?: boolean;
}

// Generate complete meta tags object
export const metaTags = (config: MetaTagsConfig) => {
  const {
    title,
    description = baseDescription,
    canonical,
    image,
    locale = 'pt-BR',
    type = 'website',
    noIndex = false
  } = config;

  const baseUrl = getBaseUrl();
  const fullCanonical = canonical ? `${baseUrl}${canonical}` : baseUrl;
  const ogImage = image ? (image.startsWith('http') ? image : `${baseUrl}${image}`) : `${baseUrl}/brand/logo.svg`;

  const meta = [
    { name: 'description', content: description },
    { property: 'og:title', content: title },
    { property: 'og:description', content: description },
    { property: 'og:type', content: type },
    { property: 'og:url', content: fullCanonical },
    { property: 'og:image', content: ogImage },
    { property: 'og:locale', content: locale },
    { property: 'og:site_name', content: baseTitle },
    { name: 'twitter:card', content: 'summary_large_image' },
    { name: 'twitter:title', content: title },
    { name: 'twitter:description', content: description },
    { name: 'twitter:image', content: ogImage },
  ];

  if (noIndex) {
    meta.push({ name: 'robots', content: 'noindex, nofollow' });
  }

  const link: LinkTag[] = [
    { rel: 'canonical', href: fullCanonical },
  ];

  // Add hreflang alternates
  if (!noIndex) {
    link.push(
      { rel: 'alternate', href: fullCanonical, hrefLang: 'pt-BR' },
      { rel: 'alternate', href: fullCanonical.replace('/pt/', '/en/'), hrefLang: 'en' },
      { rel: 'alternate', href: fullCanonical, hrefLang: 'x-default' }
    );
  }

  return {
    title,
    meta,
    link
  };
};

// JSON-LD Schema generators
export const generateOrganizationSchema = () => ({
  '@context': 'https://schema.org',
  '@type': 'Organization',
  name: baseTitle,
  url: getBaseUrl(),
  logo: `${getBaseUrl()}/logo.png`,
  description: baseDescription,
  contactPoint: {
    '@type': 'ContactPoint',
    contactType: 'Customer Service',
    areaServed: 'BR',
    availableLanguage: ['Portuguese', 'English']
  }
});

// Page-specific SEO generators
export const seoHome = (locale: string = 'pt-BR') => {
  const title = buildTitle();
  const description = locale === 'en' 
    ? 'Luxury fashion • Light glass • Hairline border'
    : 'Moda luxury • Vidro leve • Borda hairline';

  return {
    ...metaTags({
      title,
      description,
      canonical: '/',
      locale
    }),
    jsonLd: [
      generateOrganizationSchema()
    ]
  };
};

📄 src/store/cart.ts

============================================================
FILE: src/store/cart.ts
============================================================
// INSANYCK STEP 10 — STORE UNIFICADO, ENTERPRISE-SAFE
// src/store/cart.ts
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";

export type Currency = "BRL"; // expande p/ "USD" no STEP 12 (checkout internacional)

export interface CartItem {
  id: string;           // uid local do item no carrinho (não é productId)
  slug: string;
  title: string;
  image?: string;
  // Variantes (preferir variantId/sku)
  variantId?: string;
  sku?: string;
  // Opções legadas (ex.: { size: "M", color: "preto" })
  options?: Record<string, string>;
  priceCents: number;
  currency: Currency;
  qty: number;
}

// === Helpers ===

// Chave estável para "dedupe": se houver variantId, usa; senão slug + options ordenadas.
function getItemKey(it: Pick<CartItem, "variantId" | "slug" | "options">): string {
  if (it.variantId) return `v:${it.variantId}`;
  const opt = it.options
    ? Object.entries(it.options)
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([k, v]) => `${k}=${v}`)
        .join("&")
    : "";
  return `s:${it.slug}|${opt}`;
}

type CartState = {
  items: CartItem[];
  hydrated: boolean;     // evita mismatch SSR
  isOpen: boolean;       // drawer mini-cart (não persisto)
  addItem: (_item: Omit<CartItem, "id">) => void;
  // Aceita id (antigo) OU key composta (nova). Mantém compatibilidade.
  removeItem: (_idOrKey: string) => void;
  updateQty: (_idOrKey: string, _qty: number) => void;
  clear: () => void;
  toggle: (_open?: boolean) => void;
  count: () => number;
  totalCents: () => number;

  // Retrocompat (APIs antigas que usam id direto)
  inc: (_id: string) => void;
  dec: (_id: string) => void;
  subtotalCents: () => number;
};

const uid = () => Math.random().toString(36).slice(2);

export const useCartStore = create<CartState>()(
  persist(
    (set, get) => ({
      items: [],
      hydrated: false,
      isOpen: false,

      // INSANYCK STEP 10 — De-dupe por variantId OU slug+options (ordenadas)
      addItem: (item) => {
        set((state) => {
          // default de currency, caso alguém esqueça de enviar
          const normalized: Omit<CartItem, "id"> = {
            ...item,
            currency: item.currency || "BRL",
          };

          const keyNew = getItemKey(normalized);
          const idx = state.items.findIndex((x) => getItemKey(x) === keyNew);

          if (idx >= 0) {
            const next = [...state.items];
            next[idx] = { ...next[idx], qty: next[idx].qty + normalized.qty };
            return { items: next };
          }

          return { items: [...state.items, { ...normalized, id: uid() }] };
        });

        get().toggle(true);
      },

      removeItem: (idOrKey) =>
        set((state) => {
          return {
            items: state.items.filter(
              (x) => x.id !== idOrKey && getItemKey(x) !== idOrKey
            ),
          };
        }),

      updateQty: (idOrKey, qty) =>
        set((state) => {
          const q = Math.max(1, qty);
          return {
            items: state.items.map((x) =>
              x.id === idOrKey || getItemKey(x) === idOrKey ? { ...x, qty: q } : x
            ),
          };
        }),

      // Retrocompat: alguns componentes antigos ainda chamam inc/dec por id
      inc: (id) =>
        set((state) => ({
          items: state.items.map((x) =>
            x.id === id ? { ...x, qty: x.qty + 1 } : x
          ),
        })),
      dec: (id) =>
        set((state) => ({
          items: state.items.map((x) =>
            x.id === id ? { ...x, qty: Math.max(1, x.qty - 1) } : x
          ),
        })),
      clear: () => set({ items: [] }),

      toggle: (open) =>
        set((state) => ({
          isOpen: typeof open === "boolean" ? open : !state.isOpen,
        })),

      count: () => get().items.reduce((acc, x) => acc + x.qty, 0),

      totalCents: () =>
        get().items.reduce((acc, x) => acc + x.priceCents * x.qty, 0),

      // Alias retrocompat
      subtotalCents: () => get().totalCents(),
    }),
    {
      // Bump de versão porque a dedupe key mudou (evita colisões com carrinhos antigos)
      name: "insanyck:cart:v2",
      storage: createJSONStorage(() =>
        typeof window !== "undefined"
          ? window.localStorage
          : (undefined as any)
      ),
      partialize: (state) => ({ items: state.items }),
      onRehydrateStorage: () => (state) => {
        // Migração leve: converte itens legados {variant?: string} -> options.variant
        if (state) {
          state.hydrated = true;
          if (Array.isArray(state.items)) {
            state.items = state.items.map((it: any) => {
              if (it && typeof it === "object") {
                // garantir currency
                if (!it.currency) it.currency = "BRL";
                // se vier de um shape antigo com `variant` (string), movemos para options
                if (it.variant && !it.options) {
                  it.options = { variant: it.variant };
                  delete it.variant;
                }
              }
              return it as CartItem;
            });
          }
        }
      },
    }
  )
);

// INSANYCK STEP 10 — Helpers de formatação e seletores
export const formatCurrency = (cents: number, currency = 'BRL') => {
  return (cents / 100).toLocaleString('pt-BR', {
    style: 'currency',
    currency,
  });
};

// Selectors auxiliares (SSR-safe)
export const useCartHydrated = () => useCartStore((s) => s.hydrated);
export const useCartCount = () =>
  useCartStore((s) => (s.hydrated ? s.items.reduce((a, x) => a + x.qty, 0) : 0));
export const useCartSubtotal = () =>
  useCartStore((s) =>
    s.hydrated ? s.items.reduce((a, x) => a + x.priceCents * x.qty, 0) : 0
  );
export const useCartTotal = () => useCartSubtotal(); // Alias

📄 src/store/wishlist.ts

============================================================
FILE: src/store/wishlist.ts
============================================================
// INSANYCK STEP 8
import { create } from "zustand";
import { persist } from "zustand/middleware";

export type WishlistItem = {
  id: string;       // uid local
  slug: string;
  title: string;
  priceCents: number;
  image?: string;
};

type WishlistState = {
  hydrated: boolean;
  items: WishlistItem[];
  has: (_slug: string) => boolean;
  add: (_item: Omit<WishlistItem, "id">) => void;
  removeBySlug: (_slug: string) => void;
  clear: () => void;
  syncWithServer: (_sessionUserId?: string) => Promise<void>;
};

export const useWishlist = create<WishlistState>()(
  persist(
    (set, get) => ({
      hydrated: false,
      items: [],
      has: (slug) => get().items.some((i) => i.slug === slug),
      add: (item) => {
        set((s) => {
          if (s.items.some((x) => x.slug === item.slug)) return s;
          const id = crypto?.randomUUID?.() ?? String(Date.now());
          return { items: [{ id, ...item }, ...s.items] };
        });
      },
      removeBySlug: (slug) => set((s) => ({ items: s.items.filter((i) => i.slug !== slug) })),
      clear: () => set({ items: [] }),
      syncWithServer: async (sessionUserId) => {
        if (!sessionUserId || typeof window === "undefined") return;
        try {
          // Puxa do servidor e faz união simples (server vence)
          const res = await fetch("/api/account/wishlist", { method: "GET" });
          if (!res.ok) return;
          const data = await res.json();
          const serverSlugs = new Set<string>((data.items ?? []).map((i: any) => i.slug));
          // Envia ao server os que só existem localmente
          for (const it of get().items) {
            if (!serverSlugs.has(it.slug)) {
              await fetch("/api/account/wishlist", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  slug: it.slug,
                  title: it.title,
                  priceCents: it.priceCents,
                  image: it.image,
                }),
              });
            }
          }
          // Atualiza store com o servidor
          const merged = (data.items ?? []).map((x: any) => ({
            id: x.id,
            slug: x.slug,
            title: x.title,
            priceCents: x.priceCents,
            image: x.image ?? undefined,
          }));
          set({ items: merged });
        } catch {
          // silencioso
        }
      },
    }),
    {
      name: "insanyck:wishlist:v1",
      onRehydrateStorage: () => (state) => {
        if (state) state.hydrated = true;
      },
      partialize: (s) => ({ items: s.items }),
    }
  )
);

📄 src/types/product.ts

============================================================
FILE: src/types/product.ts
============================================================
// INSANYCK STEP 11 — Real Product Types from Prisma Schema
import { Product as PrismaProduct, ProductImage, Variant, Price, Inventory, Category, VariantOption, OptionValue, Option } from '@prisma/client';

// Extended Product type with all relations we typically need
export type Product = PrismaProduct & {
  category?: Category | null;
  images?: ProductImage[];
  variants?: (Variant & {
    price?: Price | null;
    inventory?: Inventory | null;
    options?: (VariantOption & {
      optionValue: OptionValue & {
        option: Option;
      };
    })[];
  })[];
};

// Simplified Product for cards/grids (matches mock interface for compatibility)
export type ProductCardData = {
  id: string;
  slug: string;
  title: string;
  price: string | number; // display price, calculated from variants
  thumbs?: {
    front?: string;
  };
  images?: {
    front?: string;
  };
  status?: "new" | "soldout" | string;
};

// Product for API responses
export type ProductWithVariants = Product;

// Helper to convert Prisma Product to Card format
export function productToCardData(product: Product): ProductCardData {
  // Get first image
  const firstImage = product.images?.[0]?.url || "/products/placeholder/front.webp";
  
  // Get price from first active variant
  const activeVariant = product.variants?.find(v => v.status === 'active');
  const priceCents = activeVariant?.price?.cents || 0;
  const priceDisplay = priceCents > 0 
    ? `R$ ${(priceCents / 100).toFixed(2).replace('.', ',')}`
    : "Consulte";

  // Check if sold out (no inventory or all variants out of stock)
  const isSoldOut = !product.variants?.some(v => 
    v.status === 'active' && 
    (v.inventory?.quantity || 0) > (v.inventory?.reserved || 0)
  );

  return {
    id: product.id,
    slug: product.slug,
    title: product.title,
    price: priceDisplay,
    thumbs: {
      front: firstImage
    },
    images: {
      front: firstImage
    },
    status: isSoldOut ? "soldout" : (product.status === "active" ? undefined : "new")
  };
}

# RESUMO DA ARQUITETURA INSANYCK

## Stack Principal
- **Framework**: Next.js 15.4.5 (Pages Router)
- **React**: 19.1.0 
- **TypeScript**: 5.5.4 (strict mode)
- **Styling**: Tailwind CSS v4 + Design System Premium
- **Database**: PostgreSQL + Prisma ORM
- **Auth**: NextAuth.js v4.24.11
- **State**: Zustand (Cart, Wishlist)
- **i18n**: next-i18next (PT/EN)
- **Payments**: Stripe 18.4.0
- **3D**: Three.js + @react-three/fiber/drei
- **PWA**: @ducanh2912/next-pwa

## Estrutura de Diretórios

### /src/pages/ (Pages Router)
- `_app.tsx` - App global com SessionProvider e i18n
- `_document.tsx` - Document com meta tags e PWA
- `index.tsx` - Home page com HeroHome
- `/api/` - API routes (auth, cart, products, stripe)
- `/conta/` - Account pages (login, signup, orders)
- `/produto/` - Product detail pages
- `/checkout/` - Checkout flow

### /src/components/
- **Layout**: Navbar, Layout, Portal
- **UI**: Button, Card, OptimizedImage, Skeleton
- **Product**: ProductCard, ProductGrid, PdpGallery
- **Cart**: CartDrawer, MiniCart, AddToCartButton
- **Empty States**: CartEmpty, OrdersEmpty, WishlistEmpty
- **Three**: Product3DView, ProductCard3D
- **PWA**: UpdateBanner
- **SEO**: Seo component

### /src/lib/
- `seo.ts` - SEO helpers (meta tags, JSON-LD, Open Graph)
- `stripe.ts` - Stripe integration
- `prisma.ts` - Database client
- `analytics.ts` - Analytics tracking
- `validate.ts` - Form validation
- `utils.ts` - Utility functions
- `env.public.ts` / `env.server.ts` - Environment variables

### /src/store/
- `cart.ts` - Zustand cart store with persistence
- `wishlist.ts` - Zustand wishlist store with server sync

### /src/types/
- `product.ts` - Product type definitions from Prisma
- `global.d.ts` - Global type declarations
- `next-auth.d.ts` - NextAuth type extensions

## Banco de Dados (Prisma)

### Modelos Principais
- **User** - Usuários (NextAuth + roles)
- **Product** - Produtos com catálogo completo
- **Variant** - Variantes de produto (tamanho, cor)
- **Category** - Categorias hierárquicas
- **Order/OrderItem** - Pedidos e itens
- **Address** - Endereços de entrega
- **WishlistItem** - Lista de desejos
- **Price/Inventory** - Preços e estoque por variante

## Features Implementadas

### E-commerce Core
- ✅ Catálogo de produtos com variantes
- ✅ Carrinho persistente (localStorage + server)
- ✅ Wishlist com sincronização
- ✅ Checkout com Stripe
- ✅ Gestão de pedidos
- ✅ Sistema de usuários

### Internacionalização
- ✅ PT/EN com next-i18next
- ✅ URLs localizadas
- ✅ Meta tags por idioma
- ✅ JSON-LD estruturado

### Performance & SEO
- ✅ SSG/SSR otimizado
- ✅ Images otimizadas
- ✅ PWA com service worker
- ✅ Meta tags completas
- ✅ Sitemap/robots dinâmicos

### Design System
- ✅ Tokens CSS consistentes
- ✅ Componentes premium
- ✅ Glass morphism
- ✅ Animações cinematográficas
- ✅ Responsivo e acessível

### Desenvolvimento
- ✅ TypeScript strict
- ✅ ESLint configurado
- ✅ Playwright E2E + A11y
- ✅ Hot reload
- ✅ Env validation

## Configurações Importantes

### next.config.ts
- PWA com runtime caching
- i18n routing
- Security headers (CSP, HSTS)
- Image optimization

### tailwind.config.ts
- Design system tokens
- Component paths
- Custom utilities

### prisma/schema.prisma
- PostgreSQL provider
- NextAuth models
- E-commerce models
- Relations e indexes

Este projeto representa uma implementação completa de e-commerce de luxo com arquitetura moderna, performance otimizada e experiência premium.